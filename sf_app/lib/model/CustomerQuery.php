<?php


/**
 * Skeleton subclass for performing query and update operations on the 'esq_customers' table.
 *
 * 
 *
 * This class was autogenerated by Propel 1.5.1-dev on:
 *
 * 05/06/10 00:32:13
 *
 * You should add additional methods to this class to meet the
 * application requirements.  This class will only be generated as
 * long as it does not already exist in the output directory.
 *
 * @package    propel.generator.lib.model
 */
class CustomerQuery extends BaseCustomerQuery
{
  /**
   * filters customers that are active in the system
   *
   * @return CustomerQuery
   */
  public function filterByReal($include_past = false)
  {
    if($include_past)
    {
      return $this -> filterByType(Customer::TYPE_SHOPPING, Criteria::NOT_EQUAL);
    }
    else
    {
      return $this -> filterByStatus(Customer::STATUS_ACTIVE) ->
        filterByType(Customer::TYPE_REGULAR);
    }
  }

  public function filterByHasNewClientMessages()
  {
    return $this -> useWebsiteQuery() ->
        useClientMessageQuery() ->
          filterByIsViewed(false) ->
        endUse() ->
      endUse() ->
      groupByClass('Customer');
  }

  /**
   * filters all shoppers that have no useful contact info whatsoever
   * 
   * @return CustomerQuery
   */
  public function filterByUseless()
  {
    return $this -> filterByType(Customer::TYPE_SHOPPING) -> 
      filterByEmail('') ->
      filterByPhone('') ->
      filterByLastName('');
  }

  /**
   * filters customers that used a coupon during signup
   *
   * @return CustomerQuery
   */
  public function filterByUsedCoupon()
  {
    return $this -> useWebsiteQuery(null, Criteria::RIGHT_JOIN) ->
          useCouponUsageQuery(null, Criteria::RIGHT_JOIN) ->
        endUse() ->
      endUse();
  }

  /**
   * filters customers that match a keyword in any obvious way
   *
   * @param string $keyword
   * @return CustomerQuery
   */
  public function filterByKeyword($keyword)
  {
    return $this
      ->where('Customer.Username like ?', $keyword."%")
      ->orWhere('Customer.LastName like ?', $keyword."%")
      ->orWhere('Customer.Email like ?', $keyword."%");
  }

  /**
   * filters shoppers
   *
   * @return CustomerQuery
   */
  public function filterByShoppers()
  {
    $this -> filterByType(Customer::TYPE_SHOPPING) ->
      filterByEmail(null, Criteria::ISNOTNULL) ->
      filterByEmail("", Criteria::NOT_EQUAL);

    $or = CustomerQuery::create() -> filterByPhone(null, Criteria::ISNOTNULL) ->
      filterByPhone("", Criteria::NOT_EQUAL);

    return $this -> mergeWith($or, Criteria::LOGICAL_OR);
  }
} // CustomerQuery
